#+TITLE: GNU Emacs Config
#+AUTHOR: cThornberry
#+DESCRIPTION: personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#company][COMPANY]]
- [[#dashboard][DASHBOARD]]
- [[#development][DEVELOPMENT]]
  - [[#flycheck][FLYCHECK]]
  - [[#languages][Languages]]
  - [[#language-servers][Language Servers]]
  - [[#projectile][Projectile]]
- [[#dired][DIRED]]
- [[#diminish][DIMINISH]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
- [[#gui-tweaks][GUI Tweaks]]
  - [[#doom-mode-line][Doom Mode Line]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#theming][Theming]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#magit][MAGIT]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-toc][Enabling TOC]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#enable-orgtempo][Enable OrgTempo]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#sudo-edit][SUDO EDIT]]
- [[#treemacs][TREEMACS]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager

#+begin_src emacs-lisp

  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1 :inherit ignore
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
  
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp

  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

  ;;When installing a package used in the init file itself,
  ;;e.g. a package which adds a use-package key word,
  ;;use the :wait recipe keyword to block until that package is installed/configured.
  ;;For example:
  ;;(use-package general :ensure (:wait t) :demand t)
  ;; Expands to: (elpaca evil (use-package evil :demand t))
      (use-package evil
          :init      ;; tweak evil's configuration before loading it
          (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
          (setq evil-want-keybinding nil)
          (setq evil-vsplit-window-right t)
          (setq evil-split-window-below t)
          (evil-mode)
          :ensure t
          :demand t)
        (use-package evil-collection
          :after evil
          :config
          (setq evil-collection-mode-list '(dashboard dired ibuffer))
          (evil-collection-init)
  	:ensure t
  	:demand t
  	:diminish)
        (use-package evil-tutor :ensure t :demand t)

      ;;Turns off elpaca-use-package-mode current declartion
      ;;Note this will cause the declaration to be interpreted immediately (not deferred).
      ;;Useful for configuring built-in emacs features.
      (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

#+end_src


** General Keybindings

#+begin_src emacs-lisp
      
    (use-package general
      :config
      (general-evil-setup)
      ;; set 'SPC' as global leader key
      (general-create-definer ct/leader-keys
    			  :states '(normal insert visual emacs)
    			  :keymaps 'override
    			  :prefix "SPC" ;; set leader
    			  :global-prefix "M-SPC") ;; access leader in insert mode
      (ct/leader-keys
       "b" '(:ignore t :wk "buffer")
       "b b" '(switch-to-buffer :wk "Switch buffer")
       "b i" '(ibuffer :wk "Ibuffer")
       "b k" '(kill-this-buffer :wk "Kill this buffer")
       "b n" '(next-buffer :wk "Next buffer")
       "b p" '(previous-buffer :wk "Previous buffer")
       "b r" '(revert-buffer :wk "Reload buffer"))
      (ct/leader-keys
        "e" '(:ignore t :wk "Evaluate")
        "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
        "e d" '(eval-defun :wk "Evaluate defun containing or after point")
        "e e" '(eval-expression :wk "Evaluate an elisp expression")
        "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
        "e r" '(eval-region :wk "Evaluate elisp in region")
        "e s" '(eshell :wk "Eshell")
        "e w w" '(eww :wk "Eww"))
       (ct/leader-keys
        "." '(find-file :wk "Find file")
        "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
        "f r" '(counsel-recentf :wk "Find recent files")
        "TAB TAB" '(comment-line :wk "Comment lines"))
       (ct/leader-keys
         "h" '(:ignore t :wk "Help")
         "h f" '(describe-function :wk "Describe function")
         "h v" '(describe-variable :wk "Describe variable")
         ;;"h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
        "h r r" '(reload-init-file :wk "Reload emacs config")) 
       (ct/leader-keys
         "t" '(:ignore t :wk "Toggle")
         "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
         "t t" '(visual-line-mode :wk "Toggle truncated lines")
         "t v" '(vterm-toggle :wk "Toggle vterm"))
       (ct/leader-keys
        "w" '(:ignore t :wk "Windows")
        ;; Window splits
        "w c" '(evil-window-delete :wk "Close window")
        "w n" '(evil-window-new :wk "New window")
        "w s" '(evil-window-split :wk "Horizontal split window")
        "w v" '(evil-window-vsplit :wk "Vertical split window")
        ;; Window motions
        "w h" '(evil-window-left :wk "Window left")
        "w j" '(evil-window-down :wk "Window down")
        "w k" '(evil-window-up :wk "Window up")
        "w l" '(evil-window-right :wk "Window right")
        "w w" '(evil-window-next :wk "Goto next window"))
       (ct/leader-keys
         "o" '(:ignore t :wk "Org")
         "o a" '(org-agenda :wk "Org agenda")
         "o e" '(org-export-dispatch :wk "Org export dispatch")
         "o i" '(org-toggle-item :wk "Org toggle item")
         "o t" '(org-todo :wk "Org todo")
         "o B" '(org-babel-tangle :wk "Org babel tangle")
         "o T" '(org-todo-list :wk "Org todo list")
         "o b" '(:ignore t :wk "Tables")
         "o b -" '(org-table-insert-hline :wk "Insert hline in table")
         "o d" '(:ignore t :wk "Date/Deadline")
         "o d t" '(org-time-stamp :wk "Org time stamp"))
       (ct/leader-keys
         "p" '(projectile-command-map :wk "Projectile"))
       (ct/leader-keys
         "l" '(:ignore t :wk "LSP")
         "l b" '(lsp-format-buffer :wk "LSP format buffer")
         "l r" '(lsp-format-region :wk "LSP format region")
         "l g" '(lsp-goto-type-definition :wk "LSP GoTo type definition")
         "l f" '(lsp-rename :wk "LSP rename/refactor"))
       (ct/leader-keys
         "d" '(:ignore t :wk "Dired")
         "d d" '(dired :wk "Open dired")
         "d j" '(dired-jump :wk "Dired jump to current")
         "d t" '(treemacs-select-directory :wk "Open directory in treemacs")
         "d p" '(peep-dired :wk "Peep-dired"))
       (ct/leader-keys
         "g" '(:ignore t :wk "Magit")
         "g g" '(magit :wk "Open Magit")
         "g p" '(magit-pull :wk "Git pull")
         "g c" '(magit-commit :wk "Git commit")
         "g s" '(magit-stage :wk "Git stage")
         "g i" '(magit-init :wk "Git init"))


      :ensure t
      :demand t
      )

#+end_src
* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
  (use-package all-the-icons
  :ensure t
  :demand t
  :if (display-graphic-p))

  (use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t)))
  :ensure t
  :demand t)

#+end_src

* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp

  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t)
    :ensure t
    :demand t)

  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode)
    :ensure t
    :demand t)

#+end_src


* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Long live the new flesh.")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "/home/dt/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
  
#+end_src

* DIRED
#+begin_src emacs-lisp
        
        (use-package dired-open
          :config
          (setq dired-open-extensions '(("gif" . "sxiv")
                                        ("jpg" . "sxiv")
                                        ("png" . "sxiv")
                                        ("mkv" . "mpv")
                                        ("mp4" . "mpv")))
          :ensure t
          :demand t)

        (use-package peep-dired
          :after dired
          :hook (evil-normalize-keymaps . peep-dired-hook)
          :config
            (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
            (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
            (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
            (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
        :ensure t
        :demand t)

        ;;(add-hook 'peep-dired-hook 'evil-normalize-keymaps)

#+end_src

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
  
  (use-package diminish :ensure t :demand t)

#+end_src

* GUI Tweaks
Making GNU Emacs not look like ass.

** Doom Mode Line
#+begin_src emacs-lisp

  (use-package doom-modeline
   :ensure t
   :init (doom-modeline-mode 1)) 

#+end_src

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp

  (setq display-line-numbers-type 'relative) ;; display relative line numbers
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  
#+end_src

** Theming
#+begin_src emacs-lisp
  
  (use-package base16-theme
   :ensure t
   :config
   (load-theme 'base16-black-metal-gorgoroth t)) 

#+end_src

* IVY (COUNSEL)
+ Ivy, A generic completion mechanism for Emacs
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
      
        (use-package counsel
          :after ivy
          :config (counsel-mode)
          :ensure t
          :demand t
          :diminish)

        (use-package ivy
          :bind
          ;; ivy-resume resumes the last Ivy-based completion.
          (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
          :custom
          (setq ivy-use-virtual-buffers t)
          (setq ivy-count-format "(%d/%d) ")
          (setq enable-recursive-minibuffers t)
          :config
          (ivy-mode)
          :ensure t
          :demand t
  	:diminish)

      (use-package all-the-icons-ivy-rich
          :ensure t
          :init (all-the-icons-ivy-rich-mode 1)
          :demand t)

      (use-package ivy-rich
          :after ivy
          :ensure t
          :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
          :custom
          (ivy-virtual-abbreviate 'full
           ivy-rich-switch-buffer-align-virtual-buffer t
           ivy-rich-path-style 'abbrev)
          :config
          (ivy-set-display-transformer 'ivy-switch-buffer
                                       'ivy-rich-switch-buffer-transformer))

#+end_src

* MAGIT
#+begin_src emacs-lisp

  (use-package magit :ensure t :demand t)
  (use-package transient :ensure t :demand t)

#+end_src

* ORG MODE
** Enabling TOC
#+begin_src emacs-lisp

  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)
    :ensure t
    :demand t)
  
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
;;(electric-indent-mode -1)
#+end_src

** Enable OrgTempo
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |


#+begin_src emacs-lisp

  (require 'org-tempo)
  
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp

  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :ensure t :demand t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  
#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp

    (use-package rainbow-mode
      :hook 
      ((org-mode prog-mode) . rainbow-mode)
      :ensure t
      :demand t
      :diminish)
    
#+end_src

* RELOAD EMACS
This is just an example of how to create a simple function in Emacs.  Use this function to reload Emacs after adding changes to the config.  Yes, I am loading the user-init-file twice in this function, which is a hack because for some reason, just loading the user-init-file once does not work properly.

#+begin_src emacs-lisp

  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))
  
#+end_src

* SUDO EDIT
Adds ability to open files with sudo privs or switch to editing with sudo privs if we initially opened the file without such privileges.

#+begin_src emacs-lisp
  
  (use-package sudo-edit
    :config
    (ct/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file"))
    :ensure t
    :demand t)

#+end_src

* WHICH-KEY
#+begin_src emacs-lisp

    (use-package which-key
      :init
        (which-key-mode 1)
      :config
      (setq which-key-side-window-location 'bottom
    	  which-key-sort-order #'which-key-key-order-alpha
    	  which-key-sort-uppercase-first nil
    	  which-key-add-column-padding 1
    	  which-key-max-display-columns nil
    	  which-key-min-display-lines 6
    	  which-key-side-window-slot -10
    	  which-key-side-window-max-height 0.25
    	  which-key-idle-delay 0.8
    	  which-key-max-description-length 25
    	  which-key-allow-imprecise-window-fit nil
    	  which-key-separator " → " )
      :ensure t
      :demand t
      :diminish)
    
#+end_src
